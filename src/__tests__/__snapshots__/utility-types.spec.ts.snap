// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should handle Omit type 1`] = `
"declare type A = $Diff<
  {
    a: string,
    b: number,
    ...
  },
  {| a: any |}
>;
declare type B = $Diff<
  {
    a: string,
    b: number,
    ...
  },
  {|
    a: any,
    b: any,
  |}
>;
declare type O = {
  a: string,
  b: number,
  ...
};
declare type U = \\"a\\";
declare type C = $Diff<O, {| [key: U]: any |}>;
"
`;

exports[`should handle utility types 1`] = `
"declare type A = $ReadOnly<{ a: number, ... }>;
declare type B = $Rest<{ a: number, ... }, { ... }>;
declare type C = $NonMaybeType<string | null>;
declare type D = $ReadOnlyArray<string>;
declare type E = $Call<<R>((...args: any[]) => R) => R, () => string>;
declare type F = { [key: string]: number, ... };
declare type G = $ReadOnlySet<number>;
declare type H = $ReadOnlyMap<string, number>;
declare type A1<Readonly> = Readonly;
declare type B1<Partial> = Partial;
declare type C1<NonNullable> = NonNullable;
declare type D1<ReadonlyArray> = ReadonlyArray;
declare type E1<ReturnType> = ReturnType;
declare type F1<Record> = Record;
declare type A2<T> = $ReadOnly<T>;
declare type B2<T> = $Rest<T, { ... }>;
declare type C2<T> = $NonMaybeType<T>;
declare type D2<T> = $ReadOnlyArray<T>;
declare type E2<T> = $Call<<R>((...args: any[]) => R) => R, () => T>;
declare type F2<T, U> = { [key: T]: U, ... };
"
`;

exports[`should handle utility types 2`] = `
"declare type A = $ReadOnly<{| a: number |}>;
declare type B = $Rest<{| a: number |}, { ... }>;
declare type C = $NonMaybeType<string | null>;
declare type D = $ReadOnlyArray<string>;
declare type E = $Call<<R>((...args: any[]) => R) => R, () => string>;
declare type F = {| [key: string]: number |};
declare type G = $ReadOnlySet<number>;
declare type H = $ReadOnlyMap<string, number>;
declare type A1<Readonly> = Readonly;
declare type B1<Partial> = Partial;
declare type C1<NonNullable> = NonNullable;
declare type D1<ReadonlyArray> = ReadonlyArray;
declare type E1<ReturnType> = ReturnType;
declare type F1<Record> = Record;
declare type A2<T> = $ReadOnly<T>;
declare type B2<T> = $Rest<T, { ... }>;
declare type C2<T> = $NonMaybeType<T>;
declare type D2<T> = $ReadOnlyArray<T>;
declare type E2<T> = $Call<<R>((...args: any[]) => R) => R, () => T>;
declare type F2<T, U> = {| [key: T]: U |};
"
`;
