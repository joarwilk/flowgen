// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should handle all properties 1`] = `
"declare interface Props {
  \\"aria-label\\": string;
  \\"aria-labelledby\\"?: number;
  color: string;
  [key: string]: string;
}
"
`;

exports[`should handle interface inheritance 1`] = `
"declare interface User {
  firstName: string;
}
declare type SpecialUser = { nice: number, ... } & User;
"
`;

exports[`should handle interface inheritance 2`] = `
"declare type User = { firstName: string, ... };
declare type SpecialUser = {
  ...$Exact<User>,
  nice: number,
  ...
};
"
`;

exports[`should handle interface inheritance 3`] = `
"declare type User = {| firstName: string |};
declare type SpecialUser = {|
  ...$Exact<User>,
  nice: number,
|};
"
`;

exports[`should handle interface inheritance 4`] = `
"declare interface User {
  firstName: string;
}
declare type SpecialUser = { nice: number, ... } & User;
"
`;

exports[`should handle interface merging 1`] = `
"declare interface User {
  firstName: string;
  lastName: string;
  username: string;
}
"
`;

exports[`should handle interface merging 2`] = `
"declare type User = {
  firstName: string,
  lastName: string,
  username: string,
  ...
};
"
`;

exports[`should handle mutli-extends pattern 1`] = `
"declare interface Shape {
  color: string;
}
declare interface PenStroke {
  penWidth: number;
}
declare type Square = { sideLength: number, ... } & Shape & PenStroke;
"
`;

exports[`should handle single interface 1`] = `
"declare interface User {
  firstName: string;
}
"
`;

exports[`should handle single interface 2`] = `
"declare type User = { firstName: string, ... };
"
`;

exports[`should handle toString property name 1`] = `
"declare interface A {
  toString(): string;
}
"
`;

exports[`should handle typed array binding pattern 1`] = `
"declare interface ArrayBinding {
  (): void;
  (x: []): void;
  (x: [string, number]): void;
}
"
`;

exports[`should handle typed object binding pattern 1`] = `
"declare interface ObjectBinding {
  (): void;
  (x: any): void;
  (x: {
    a: string,
    b: number,
    ...
  }): void;
}
"
`;

exports[`should handle untyped array binding pattern 1`] = `
"declare interface ArrayBinding {
  (): void;
  (x: any): void;
  (x: any): void;
}
"
`;

exports[`should handle untyped object binding pattern 1`] = `
"declare interface ObjectBinding {
  (): void;
  (x: { ... }): void;
  (x: {
    a: any,
    b: any,
    ...
  }): void;
}
"
`;

exports[`should remove generic defaults in call signature 1`] = `
"declare interface AbstractLevelDOWN<K, V> {}
declare interface AbstractLevelDOWNConstructor {
  <K, V>(location: string): AbstractLevelDOWN<K, V>;
}
"
`;

exports[`should remove this in call signature 1`] = `
"declare interface Arc<This, Datum> {
  (d: Datum, ...args: any[]): string | null;
}
declare interface D<This, Datum> {
  new(d: Datum, ...args: any[]): void;
}
declare interface C<This, Datum> {
  (d: Datum, ...args: any[]): any;
}
"
`;

exports[`should support call signature 1`] = `
"declare interface ObjectSchema<T> {}
declare interface ObjectSchemaDefinition<T> {}
declare interface ObjectSchemaConstructor {
  <T: { [key: string]: any }>(
    fields?: ObjectSchemaDefinition<T>
  ): ObjectSchema<T>;
  new(): ObjectSchema<{ ... }>;
}
"
`;

exports[`should support omitting generic defaults in types, classes, interfaces 1`] = `
"declare interface Foo<T = Symbol, U = number> {}
declare type FooBar = { ... } & Foo<>;
declare type Bar<T = number, U = string> = { ... };
declare class Baz<T = string, U = number> {}
declare var a: Foo<>;
declare var b: Bar<>;
declare var c: Baz<>;
declare var d: Foo<any>;
declare var e: Bar<any>;
declare var f: Baz<any>;
"
`;

exports[`should support optional methods 1`] = `
"declare interface Example<State> {
  required<R>(value: any, state: State): true;
  optional?: <R>(value: any, state: State) => false;
}
"
`;

exports[`should support readonly modifier 1`] = `
"declare interface Helper {
  +name: string;
  +callback: () => void;
}
"
`;
